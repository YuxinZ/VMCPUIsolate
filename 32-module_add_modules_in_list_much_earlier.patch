diff --git a/kernel/module.c b/kernel/module.c
index da37830..e3e424c 100644
--- a/kernel/module.c
+++ b/kernel/module.c
@@ -2888,7 +2888,7 @@ static bool finished_loading(const char *name)
 	bool ret;
 
 	mutex_lock(&module_mutex);
-	mod = find_module(name);
+	mod = find_module_all(name, true);
 	ret = !mod || mod->state == MODULE_STATE_LIVE
 		|| mod->state == MODULE_STATE_GOING;
 	mutex_unlock(&module_mutex);
@@ -2921,10 +2921,36 @@ static struct module *load_module(void __user *umod,
 		goto free_copy;
 	}
 
+       /*
+        * We try to place it in the list now to make sure it's unique
+        * before we dedicate too many resources.  In particular,
+        * temporary percpu memory exhaustion.
+        */
+       mod->state = MODULE_STATE_UNFORMED;
+again:
+       mutex_lock(&module_mutex);
+       if ((old = find_module_all(mod->name, true)) != NULL) {
+               if (old->state == MODULE_STATE_COMING
+                   || old->state == MODULE_STATE_UNFORMED) {
+                       /* Wait in case it fails to load. */
+                       mutex_unlock(&module_mutex);
+                       err = wait_event_interruptible(module_wq,
+                                              finished_loading(mod->name));
+                       if (err)
+                               goto free_module;
+                       goto again;
+               }
+               err = -EEXIST;
+               mutex_unlock(&module_mutex);
+               goto free_module;
+       }
+       list_add_rcu(&mod->list, &modules);
+       mutex_unlock(&module_mutex);
+
 	/* Now module is in final location, initialize linked lists, etc. */
 	err = module_unload_init(mod);
 	if (err)
-		goto free_module;
+		goto unlink_mod;
 
 	/* Now we've got everything in the final locations, we can
 	 * find optional sections. */
@@ -2959,54 +2985,33 @@ static struct module *load_module(void __user *umod,
 		goto free_arch_cleanup;
 	}
 
-	/* Mark state as coming so strong_try_module_get() ignores us. */
-	mod->state = MODULE_STATE_COMING;
-
-	/* Now sew it into the lists so we can get lockdep and oops
-	 * info during argument parsing.  No one should access us, since
-	 * strong_try_module_get() will fail.
-	 * lockdep/oops can run asynchronous, so use the RCU list insertion
-	 * function to insert in a way safe to concurrent readers.
-	 * The mutex protects against concurrent writers.
-	 */
-again:
-	mutex_lock(&module_mutex);
-	if ((old = find_module(mod->name)) != NULL) {
-		if (old->state == MODULE_STATE_COMING) {
-			/* Wait in case it fails to load. */
-			mutex_unlock(&module_mutex);
-			err = wait_event_interruptible(module_wq,
-					       finished_loading(mod->name));
-			if (err)
-				goto free_arch_cleanup;
-			goto again;
-		}
-		err = -EEXIST;
-		goto unlock;
-	}
-
-	/* This has to be done once we're sure module name is unique. */
 	dynamic_debug_setup(info.debug, info.num_debug);
 
-	/* Find duplicate symbols */
+       mutex_lock(&module_mutex);
+       /* Find duplicate symbols (must be called under lock). */
 	err = verify_export_symbols(mod);
 	if (err < 0)
-		goto ddebug;
+		goto ddebug_cleanup;
 
+       /* This relies on module_mutex for list integrity. */
 	module_bug_finalize(info.hdr, info.sechdrs, mod);
-	list_add_rcu(&mod->list, &modules);
+
+       /* Mark state as coming so strong_try_module_get() ignores us,
+        * but kallsyms etc. can see us. */
+       mod->state = MODULE_STATE_COMING;
+
 	mutex_unlock(&module_mutex);
 
 	/* Module is ready to execute: parsing args may do that. */
 	err = parse_args(mod->name, mod->args, mod->kp, mod->num_kp,
 			 -32768, 32767, &ddebug_dyndbg_module_param_cb);
 	if (err < 0)
-		goto unlink;
+		goto bug_cleanup;
 
 	/* Link in to syfs. */
 	err = mod_sysfs_setup(mod, &info, mod->kp, mod->num_kp);
 	if (err < 0)
-		goto unlink;
+		goto bug_cleanup;
 
 	/* Get rid of temporary copy. */
 	free_copy(&info);
@@ -3015,16 +3020,14 @@ again:
 	trace_module_load(mod);
 	return mod;
 
- unlink:
+ bug_cleanup:
+	/* module_bug_cleanup needs module_mutex protection */
 	mutex_lock(&module_mutex);
-	/* Unlink carefully: kallsyms could be walking list. */
-	list_del_rcu(&mod->list);
 	module_bug_cleanup(mod);
 
- ddebug:
-	dynamic_debug_remove(info.debug);
- unlock:
 	mutex_unlock(&module_mutex);
+ ddebug_cleanup:
+	dynamic_debug_remove(info.debug);
 	synchronize_sched();
 	kfree(mod->args);
  free_arch_cleanup:
@@ -3033,6 +3036,12 @@ again:
 	free_modinfo(mod);
  free_unload:
 	module_unload_free(mod);
+ unlink_mod:
+	mutex_lock(&module_mutex);
+	/* Unlink carefully: kallsyms could be walking list. */
+	list_del_rcu(&mod->list);
+	wake_up_all(&module_wq);
+	mutex_unlock(&module_mutex);
  free_module:
 	module_deallocate(mod, &info);
  free_copy:
diff --git a/kernel/module.c.rej b/kernel/module.c.rej
index 3f371d2..6bd2714 100644
--- a/kernel/module.c.rej
+++ b/kernel/module.c.rej
@@ -1,15 +1,39 @@
 --- kernel/module.c
 +++ kernel/module.c
-@@ -2888,7 +2888,7 @@
- 	bool ret;
+@@ -3141,6 +3141,32 @@
+ 		goto free_copy;
+ 	}
  
- 	mutex_lock(&module_mutex);
--	mod = find_module(name);
-+	mod = find_module_all(name, true);
- 	ret = !mod || mod->state == MODULE_STATE_LIVE
- 		|| mod->state == MODULE_STATE_GOING;
- 	mutex_unlock(&module_mutex);
-@@ -2985,49 +3011,28 @@
++	/*
++	 * We try to place it in the list now to make sure it's unique
++	 * before we dedicate too many resources.  In particular,
++	 * temporary percpu memory exhaustion.
++	 */
++	mod->state = MODULE_STATE_UNFORMED;
++again:
++	mutex_lock(&module_mutex);
++	if ((old = find_module_all(mod->name, true)) != NULL) {
++		if (old->state == MODULE_STATE_COMING
++		    || old->state == MODULE_STATE_UNFORMED) {
++			/* Wait in case it fails to load. */
++			mutex_unlock(&module_mutex);
++			err = wait_event_interruptible(module_wq,
++					       finished_loading(mod->name));
++			if (err)
++				goto free_module;
++			goto again;
++		}
++		err = -EEXIST;
++		mutex_unlock(&module_mutex);
++		goto free_module;
++	}
++	list_add_rcu(&mod->list, &modules);
++	mutex_unlock(&module_mutex);
++
+ #ifdef CONFIG_MODULE_SIG
+ 	mod->sig_ok = info->sig_ok;
+ 	if (!mod->sig_ok)
+@@ -3185,54 +3211,33 @@
  		goto free_arch_cleanup;
  	}
  
@@ -40,7 +64,7 @@
 -	}
 -
 -	/* This has to be done once we're sure module name is unique. */
- 	dynamic_debug_setup(info.debug, info.num_debug);
+ 	dynamic_debug_setup(info->debug, info->num_debug);
  
 -	/* Find duplicate symbols */
 +	mutex_lock(&module_mutex);
@@ -51,7 +75,7 @@
 +		goto ddebug_cleanup;
  
 +	/* This relies on module_mutex for list integrity. */
- 	module_bug_finalize(info.hdr, info.sechdrs, mod);
+ 	module_bug_finalize(info->hdr, info->sechdrs, mod);
 -	list_add_rcu(&mod->list, &modules);
 +
 +	/* Mark state as coming so strong_try_module_get() ignores us,
@@ -68,4 +92,31 @@
 +		goto bug_cleanup;
  
  	/* Link in to syfs. */
- 	err = mod_sysfs_setup(mod, &info, mod->kp, mod->num_kp);
+ 	err = mod_sysfs_setup(mod, info, mod->kp, mod->num_kp);
+ 	if (err < 0)
+-		goto unlink;
++		goto bug_cleanup;
+ 
+ 	/* Get rid of temporary copy. */
+ 	free_copy(info);
+@@ -3242,16 +3247,13 @@
+ 
+ 	return do_init_module(mod);
+ 
+- unlink:
++ bug_cleanup:
++	/* module_bug_cleanup needs module_mutex protection */
+ 	mutex_lock(&module_mutex);
+-	/* Unlink carefully: kallsyms could be walking list. */
+-	list_del_rcu(&mod->list);
+ 	module_bug_cleanup(mod);
+-	wake_up_all(&module_wq);
+- ddebug:
+-	dynamic_debug_remove(info->debug);
+- unlock:
+ 	mutex_unlock(&module_mutex);
++ ddebug_cleanup:
++	dynamic_debug_remove(info->debug);
+ 	synchronize_sched();
+ 	kfree(mod->args);
+  free_arch_cleanup:
diff --git a/lib/bug.c b/lib/bug.c
index a28c141..d0cdf14 100644
--- a/lib/bug.c
+++ b/lib/bug.c
@@ -55,6 +55,7 @@ static inline unsigned long bug_addr(const struct bug_entry *bug)
 }
 
 #ifdef CONFIG_MODULES
+/* Updates are protected by module mutex */
 static LIST_HEAD(module_bug_list);
 
 static const struct bug_entry *module_find_bug(unsigned long bugaddr)
